pipeline {
  agent none
  stages{
      stage("build"){
        agent{
           docker{
             image 'python:2.7.16-slim'
             args '--user root'
        }

        when{
          changeset "**/vote/**"
        }
        steps{
            echo 'Compiling worker app'
            dir('vote'){
            sh 'pip install -r requirements.txt'
            }
        }
      }
      stage("test"){
        agent{
           docker{
             image 'python:2.7.16-slim'
             args '--user root'
        }

        when{
          changeset "**/vote/**"
          }
        steps{
            echo 'Running Unit Tests on worker app'
            dir('vote'){
              sh 'nosetests -v'
            }

            }
        }
    stage('docker-package'){
       agent any
       when{
          changeset "**/vote/**"
       }
       steps{
	 echo 'Packing vote app with docker'
	 script{
 	   docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
 	     def workerImage = docker.build("metiii/vote:v${env.BUILD_ID}", "./worker")
	     workerImage.push()
	     workerImage.push("latest")
	  }
	 }
	}
       }
    }   
    

  post{
    always{
      echo 'Building multibranch pipeline for worker is completed..'
    }
    failure{
    slackSend (channel: "instavote-cd", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
    success{
      slackSend (channel: "instavote-cd", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
  }
}
}
